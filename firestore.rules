/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a basic authenticated access model.
 *
 * Core Philosophy:
 * Only authenticated users can read or write data. Data shape is not strictly enforced.
 *
 * Data Structure:
 * - /properties/{propertyId}: Stores property information. Accessible to authenticated users.
 * - /tenants/{tenantId}: Stores tenant information. Accessible to authenticated users.
 * - /transactions/{transactionId}: Stores transaction data. Accessible to authenticated users.
 *
 * Key Security Decisions:
 * - No user-specific ownership or roles are enforced in this initial prototype.
 * - Data validation is minimal, focusing on authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @function isSignedIn
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Controls access to the 'properties' collection.
     * @path /properties/{propertyId}
     * @allow (get) Authenticated user can read a specific property.
     *   Example: User with UID 'abc' can get /properties/xyz.
     * @deny (get) Unauthenticated user cannot read a specific property.
     *   Example: Anonymous user cannot get /properties/xyz.
     * @allow (list) Authenticated user can list properties.
     *   Example: User with UID 'abc' can list all documents in /properties.
     * @deny (list) Unauthenticated user cannot list properties.
     *   Example: Anonymous user cannot list all documents in /properties.
     * @allow (create) Authenticated user can create a property.
     *   Example: User with UID 'abc' can create a new property document.
     * @deny (create) Unauthenticated user cannot create a property.
     *   Example: Anonymous user cannot create a new property document.
     * @allow (update) Authenticated user can update a property.
     *   Example: User with UID 'abc' can update /properties/xyz.
     * @deny (update) Unauthenticated user cannot update a property.
     *   Example: Anonymous user cannot update /properties/xyz.
     * @allow (delete) Authenticated user can delete a property.
     *   Example: User with UID 'abc' can delete /properties/xyz.
     * @deny (delete) Unauthenticated user cannot delete a property.
     *   Example: Anonymous user cannot delete /properties/xyz.
     * @principle Requires authentication for all read and write operations.
     */
    match /properties/{propertyId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the 'tenants' collection.
     * @path /tenants/{tenantId}
     * @allow (get) Authenticated user can read a specific tenant.
     *   Example: User with UID 'abc' can get /tenants/xyz.
     * @deny (get) Unauthenticated user cannot read a specific tenant.
     *   Example: Anonymous user cannot get /tenants/xyz.
     * @allow (list) Authenticated user can list tenants.
     *   Example: User with UID 'abc' can list all documents in /tenants.
     * @deny (list) Unauthenticated user cannot list tenants.
     *   Example: Anonymous user cannot list all documents in /tenants.
     * @allow (create) Authenticated user can create a tenant.
     *   Example: User with UID 'abc' can create a new tenant document.
     * @deny (create) Unauthenticated user cannot create a tenant.
     *   Example: Anonymous user cannot create a new tenant document.
     * @allow (update) Authenticated user can update a tenant.
     *   Example: User with UID 'abc' can update /tenants/xyz.
     * @deny (update) Unauthenticated user cannot update a tenant.
     *   Example: Anonymous user cannot update /tenants/xyz.
     * @allow (delete) Authenticated user can delete a tenant.
     *   Example: User with UID 'abc' can delete /tenants/xyz.
     * @deny (delete) Unauthenticated user cannot delete a tenant.
     *   Example: Anonymous user cannot delete /tenants/xyz.
     * @principle Requires authentication for all read and write operations.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the 'transactions' collection.
     * @path /transactions/{transactionId}
     * @allow (get) Authenticated user can read a specific transaction.
     *   Example: User with UID 'abc' can get /transactions/xyz.
     * @deny (get) Unauthenticated user cannot read a specific transaction.
     *   Example: Anonymous user cannot get /transactions/xyz.
     * @allow (list) Authenticated user can list transactions.
     *   Example: User with UID 'abc' can list all documents in /transactions.
     * @deny (list) Unauthenticated user cannot list transactions.
     *   Example: Anonymous user cannot list all documents in /transactions.
     * @allow (create) Authenticated user can create a transaction.
     *   Example: User with UID 'abc' can create a new transaction document.
     * @deny (create) Unauthenticated user cannot create a transaction.
     *   Example: Anonymous user cannot create a new transaction document.
     * @allow (update) Authenticated user can update a transaction.
     *   Example: User with UID 'abc' can update /transactions/xyz.
     * @deny (update) Unauthenticated user cannot update a transaction.
     *   Example: Anonymous user cannot update /transactions/xyz.
     * @allow (delete) Authenticated user can delete a transaction.
     *   Example: User with UID 'abc' can delete /transactions/xyz.
     * @deny (delete) Unauthenticated user cannot delete a transaction.
     *   Example: Anonymous user cannot delete /transactions/xyz.
     * @principle Requires authentication for all read and write operations.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}