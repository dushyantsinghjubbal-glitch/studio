/**
 * @file Firestore Security Rules
 * @description This ruleset enforces authenticated access and user ownership.
 *
 * Core Philosophy:
 * Only authenticated users can access data. Users can only read/write their own
 * profile data. Data for properties, tenants, and transactions is accessible
 * to any authenticated user, assuming a single-owner model for the app.
 *
 * Data Structure:
 * - /users/{userId}: Stores user-specific profile info. Only accessible by that user.
 * - /properties/{propertyId}: Stores property information. Accessible to any authenticated user.
 * - /tenants/{tenantId}: Stores tenant information. Accessible to any authenticated user.
 * - /transactions/{transactionId}: Stores transaction data. Accessible to any authenticated user.
 *
 * Key Security Decisions:
 * - User data in `/users` is strictly private to the owner.
 * - All other data collections assume a single-landlord model where any logged-in
 *   user (the landlord) can manage all properties, tenants, etc.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @function isSignedIn
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
    
    /**
     * @function isOwner
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId - The UID of the user to check against.
     * @return {boolean} True if the request auth UID matches the userId.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Controls access to the 'users' collection.
     * @path /users/{userId}
     * @allow (get) A user can read their own profile.
     * @allow (create, update) A user can create or update their own profile.
     * @deny (delete) No user can delete a profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create, update: if isSignedIn() && isOwner(userId);
      allow delete: if false; // Profiles cannot be deleted
    }

    /**
     * @description Controls access to the 'properties' collection.
     * @path /properties/{propertyId}
     * @allow (*) Authenticated users can perform any operation.
     * @principle Requires authentication for all read and write operations.
     */
    match /properties/{propertyId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Controls access to the 'tenants' collection.
     * @path /tenants/{tenantId}
     * @allow (*) Authenticated users can perform any operation.
     * @principle Requires authentication for all read and write operations.
     */
    match /tenants/{tenantId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Controls access to the 'transactions' collection.
     * @path /transactions/{transactionId}
     * @allow (*) Authenticated users can perform any operation.
     * @principle Requires authentication for all read and write operations.
     */
    match /transactions/{transactionId} {
      allow read, write: if isSignedIn();
    }
  }
}
