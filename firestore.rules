/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * All data is accessible to all authenticated users.
 *
 * Data Structure:
 * The database consists of two top-level collections: "properties" and "tenants".
 *
 * Key Security Decisions:
 * - Anonymous authentication is enabled, so unauthenticated access is not possible.
 * - Data validation is not performed beyond ownership checks to accelerate development.
 * - No user listing is allowed.
 * - All authenticated users can read all documents in the "properties" collection. Only authenticated users can modify.
 * - All authenticated users can read all documents in the "tenants" collection. Only authenticated users can modify.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read properties, but only authenticated users can create, update, and delete them.
     * @path /properties/{propertyId}
     * @allow (list) - Any authenticated user can list properties.
     * @allow (get) - Any authenticated user can get a property.
     * @allow (create) - Any authenticated user can create a property.
     * @allow (update) - Any authenticated user can update a property.
     * @allow (delete) - Any authenticated user can delete a property.
     * @deny (create) - if request.auth == null
     * @deny (update) - if request.auth == null
     * @deny (delete) - if request.auth == null
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /properties/{propertyId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.size() > 0;
      allow delete: if isSignedIn() && resource.size() > 0;
    }

    /**
     * @description Allows any authenticated user to read tenants, but only authenticated users can create, update, and delete them.
     * @path /tenants/{tenantId}
     * @allow (list) - Any authenticated user can list tenants.
     * @allow (get) - Any authenticated user can get a tenant.
     * @allow (create) - Any authenticated user can create a tenant.
     * @allow (update) - Any authenticated user can update a tenant.
     * @allow (delete) - Any authenticated user can delete a tenant.
     * @deny (create) - if request.auth == null
     * @deny (update) - if request.auth == null
     * @deny (delete) - if request.auth == null
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /tenants/{tenantId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.size() > 0;
      allow delete: if isSignedIn() && resource.size() > 0;
    }

    // Helper function to determine if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}